-- SQL Server Diagnostic Queries
-- Rob Price
-- January 2017
-- Last Modified: January 20, 2017
 
-- **** Please switch to a user database that you are interested in! *****
--USE YourDatabaseName; -- make sure to change to an actual database on your instance, not the master system database
--GO


 -- Individual File Sizes and space available for current database (File Sizes and Space)
SELECT
    f.name AS [File Name] ,
    f.physical_name AS [Physical Name],
    CAST((f.size/128.0) AS DECIMAL(15,2)) AS [Total Size in MB],
    CAST(f.size/128.0 - CAST(FILEPROPERTY(f.name, 'SpaceUsed') AS int)/128.0 AS DECIMAL(15,2)) AS [Available Space In MB],
    f.[file_id],
    fg.name AS [Filegroup Name],
    f.is_percent_growth, f.growth,
    fg.is_default,
    fg.is_read_only
FROM
    sys.database_files AS f WITH (NOLOCK)
        LEFT OUTER JOIN sys.filegroups AS fg WITH (NOLOCK)
            ON f.data_space_id = fg.data_space_id
ORDER BY
    f.[file_id] OPTION (RECOMPILE);
    
    
    -- I/O Statistics by file for the current database (IO Stats By File)
-- This helps you characterize your workload better from an I/O perspective for this database
SELECT
    DB_NAME(DB_ID()) AS [Database Name],
    df.name AS [Logical Name],
    vfs.[file_id],
    df.type_desc,
    df.physical_name AS [Physical Name],
    CAST(vfs.size_on_disk_bytes/1048576.0 AS DECIMAL(10, 2)) AS [Size on Disk (MB)],
    vfs.num_of_reads,
    vfs.num_of_writes,
    vfs.io_stall_read_ms,
    vfs.io_stall_write_ms,
    CAST(100. * vfs.io_stall_read_ms/(vfs.io_stall_read_ms + vfs.io_stall_write_ms) AS DECIMAL(10,1)) AS [IO Stall Reads Pct],
    CAST(100. * vfs.io_stall_write_ms/(vfs.io_stall_write_ms + vfs.io_stall_read_ms) AS DECIMAL(10,1)) AS [IO Stall Writes Pct],
    (vfs.num_of_reads + vfs.num_of_writes) AS [Writes + Reads],
    CAST(vfs.num_of_bytes_read/1048576.0 AS DECIMAL(10, 2)) AS [MB Read],
    CAST(vfs.num_of_bytes_written/1048576.0 AS DECIMAL(10, 2)) AS [MB Written],
    CAST(100. * vfs.num_of_reads/(vfs.num_of_reads + vfs.num_of_writes) AS DECIMAL(10,1)) AS [# Reads Pct],
    CAST(100. * vfs.num_of_writes/(vfs.num_of_reads + vfs.num_of_writes) AS DECIMAL(10,1)) AS [# Write Pct],
    CAST(100. * vfs.num_of_bytes_read/(vfs.num_of_bytes_read + vfs.num_of_bytes_written) AS DECIMAL(10,1)) AS [Read Bytes Pct],
    CAST(100. * vfs.num_of_bytes_written/(vfs.num_of_bytes_read + vfs.num_of_bytes_written) AS DECIMAL(10,1)) AS [Written Bytes Pct]
FROM
    sys.dm_io_virtual_file_stats(DB_ID(), NULL) AS vfs
    INNER JOIN sys.database_files AS df WITH (NOLOCK)
        ON vfs.[file_id]= df.[file_id]
OPTION (RECOMPILE);


-- Get most frequently executed queries for this database (Query Execution Counts)
SELECT TOP(50)
    LEFT(t.[text], 50) AS [Short Query Text],
    qs.execution_count AS [Execution Count],
    qs.total_logical_reads AS [Total Logical Reads],
    qs.total_logical_reads/qs.execution_count AS [Avg Logical Reads],
    qs.total_worker_time AS [Total Worker Time],
    qs.total_worker_time/qs.execution_count AS [Avg Worker Time],
    qs.total_elapsed_time AS [Total Elapsed Time],
    qs.total_elapsed_time/qs.execution_count AS [Avg Elapsed Time],
    qs.creation_time AS [Creation Time],
    t.[text] AS [Complete Query Text],
    qp.query_plan AS [Query Plan]
FROM
    sys.dm_exec_query_stats AS qs WITH (NOLOCK)
    CROSS APPLY sys.dm_exec_sql_text(plan_handle) AS t
    CROSS APPLY sys.dm_exec_query_plan(plan_handle) AS qp
WHERE
    t.dbid = DB_ID()
ORDER BY
    qs.execution_count DESC
OPTION (RECOMPILE);


-- Possible Bad NC Indexes (writes > reads) (Bad NC Indexes)
-- Look for indexes with high numbers of writes and zero or very low numbers of reads
-- Consider your complete workload, and how long your instance has been running
-- Investigate further before dropping an index!
SELECT
    OBJECT_NAME(s.[object_id]) AS [Table Name],
    i.name AS [Index Name],
    i.index_id,
    i.is_disabled,
    i.is_hypothetical,
    i.has_filter,
    i.fill_factor,
    user_updates AS [Total Writes],
    user_seeks + user_scans + user_lookups AS [Total Reads],
    user_updates - (user_seeks + user_scans + user_lookups) AS [Difference]
FROM
    sys.dm_db_index_usage_stats AS s WITH (NOLOCK)
        INNER JOIN sys.indexes AS i WITH (NOLOCK)
        ON s.[object_id] = i.[object_id]
        AND i.index_id = s.index_id
WHERE
    OBJECTPROPERTY(s.[object_id],'IsUserTable') = 1
        AND s.database_id = DB_ID()
        AND user_updates > (user_seeks + user_scans + user_lookups)
        AND i.index_id > 1
ORDER BY
    [Difference] DESC,
    [Total Writes] DESC,
    [Total Reads] ASC OPTION (RECOMPILE);
    
    
-- Missing Indexes for current database by Index Advantage (Missing Indexes)
-- Look at index advantage, last user seek time, number of user seeks to help determine source and importance
-- SQL Server is overly eager to add included columns, so beware
-- Do not just blindly add indexes that show up from this query!!!
SELECT DISTINCT
    CONVERT(decimal(18,2),
    user_seeks * avg_total_user_cost * (avg_user_impact * 0.01)) AS [index_advantage],
    migs.last_user_seek,
    mid.[statement] AS [Database.Schema.Table],
    mid.equality_columns,
    mid.inequality_columns,
    mid.included_columns,
    migs.unique_compiles,
    migs.user_seeks,
    migs.avg_total_user_cost,
    migs.avg_user_impact,
    OBJECT_NAME(mid.[object_id]) AS [Table Name],
    p.rows AS [Table Rows]
FROM
    sys.dm_db_missing_index_group_stats AS migs WITH (NOLOCK)
    INNER JOIN sys.dm_db_missing_index_groups AS mig WITH (NOLOCK)
        ON migs.group_handle = mig.index_group_handle
    INNER JOIN sys.dm_db_missing_index_details AS mid WITH (NOLOCK)
        ON mig.index_handle = mid.index_handle
    INNER JOIN sys.partitions AS p WITH (NOLOCK)
        ON p.[object_id] = mid.[object_id]
WHERE
    mid.database_id = DB_ID()
ORDER BY
    index_advantage DESC
OPTION (RECOMPILE);


-- Find missing index warnings for cached plans in the current database (Missing Index Warnings)
-- Helps you connect missing indexes to specific stored procedures or queries
-- This can help you decide whether to add them or not
-- Note: This query could take some time on a busy instance
SELECT TOP(25)
    OBJECT_NAME(objectid) AS [ObjectName],
    cp.objtype, cp.usecounts, cp.size_in_bytes, query_plan
FROM
    sys.dm_exec_cached_plans AS cp WITH (NOLOCK)
    CROSS APPLY sys.dm_exec_query_plan(cp.plan_handle) AS qp
WHERE
    CAST(query_plan AS NVARCHAR(MAX)) LIKE N'%MissingIndex%'
    AND dbid = DB_ID()
ORDER BY
    cp.usecounts DESC
OPTION (RECOMPILE);


-- Breaks down buffers used by current database by object (table, index) in the buffer cache (Buffer Usage)
-- Note: This query could take some time on a busy instance
-- Tells you what tables and indexes are using the most memory in the buffer cache
-- It can help identify possible candidates for data compression
SELECT
    OBJECT_NAME(p.[object_id]) AS [Object Name],
    p.index_id,
    CAST(COUNT(*)/128.0 AS DECIMAL(10, 2)) AS [Buffer size(MB)], 
    COUNT(*) AS [BufferCount],
    p.[Rows] AS [Row Count],
    p.data_compression_desc AS [Compression Type]
FROM
    sys.allocation_units AS a WITH (NOLOCK)
INNER JOIN sys.dm_os_buffer_descriptors AS b WITH (NOLOCK)
    ON a.allocation_unit_id = b.allocation_unit_id
INNER JOIN sys.partitions AS p WITH (NOLOCK)
    ON a.container_id = p.hobt_id
WHERE
    b.database_id = CONVERT(int, DB_ID())
        AND p.[object_id] > 100
        AND OBJECT_NAME(p.[object_id]) NOT LIKE N'plan_%'
        AND OBJECT_NAME(p.[object_id]) NOT LIKE N'sys%'
        AND OBJECT_NAME(p.[object_id]) NOT LIKE N'xml_index_nodes%'
GROUP BY
    p.[object_id],
    p.index_id,
    p.data_compression_desc, p.[Rows]
ORDER BY
    [BufferCount] DESC
OPTION (RECOMPILE);


-- When were Statistics last updated on all indexes? (Statistics Update)
-- Helps discover possible problems with out-of-date statistics
-- Also gives you an idea which indexes are the most active
-- sys.stats (Transact-SQL)
-- https://msdn.microsoft.com/en-us/library/ms177623.aspx
SELECT
    SCHEMA_NAME(o.Schema_ID) + N'.' + o.[NAME] AS [Object Name],
    o.[type_desc] AS [Object Type],
    i.[name] AS [Index Name],
    STATS_DATE(i.[object_id], i.index_id) AS [Statistics Date],
    s.auto_created,
    s.no_recompute,
    s.user_created,
    st.row_count,
    st.used_page_count
FROM
    sys.objects AS o WITH (NOLOCK)
        INNER JOIN sys.indexes AS i WITH (NOLOCK)
            ON o.[object_id] = i.[object_id]
        INNER JOIN sys.stats AS s WITH (NOLOCK)
            ON i.[object_id] = s.[object_id]
            AND i.index_id = s.stats_id
        INNER JOIN sys.dm_db_partition_stats AS st WITH (NOLOCK)
            ON o.[object_id] = st.[object_id]
            AND i.[index_id] = st.[index_id]
WHERE
    o.[type] IN ('U', 'V')
    AND st.row_count > 0
ORDER BY
    STATS_DATE(i.[object_id], i.index_id) DESC OPTION (RECOMPILE);
    
    
-- Look at most frequently modified indexes and statistics (Volatile Indexes)
-- This helps you understand your workload and make better decisions about
-- things like data compression and adding new indexes to a table
SELECT
    o.[name] AS [Object Name],
    o.[object_id],
    o.[type_desc],
    s.[name] AS [Statistics Name],
    s.stats_id,
    s.no_recompute,
    s.auto_created,
    sp.modification_counter,
    sp.[rows],
    sp.rows_sampled,
    sp.last_updated
FROM
    sys.objects AS o WITH (NOLOCK)
        INNER JOIN sys.stats AS s WITH (NOLOCK)
            ON s.object_id = o.object_id
        CROSS APPLY sys.dm_db_stats_properties(s.object_id, s.stats_id) AS sp
WHERE
    o.[type_desc] NOT IN (N'SYSTEM_TABLE', N'INTERNAL_TABLE')
        AND sp.modification_counter > 0
ORDER BY
    sp.modification_counter DESC,
    o.name OPTION (RECOMPILE);
    
    
-- Get fragmentation info for all indexes above a certain size in the current database (Index Fragmentation)
-- Note: This query could take some time on a very large database
-- Helps determine whether you have framentation in your relational indexes
-- and how effective your index maintenance strategy is
SELECT
    DB_NAME(ps.database_id) AS [Database Name],
    SCHEMA_NAME(o.[schema_id]) AS [Schema Name],
    OBJECT_NAME(ps.OBJECT_ID) AS [Object Name],
    i.[name] AS [Index Name],
    ps.index_id,
    ps.index_type_desc,
    ps.avg_fragmentation_in_percent,
    ps.fragment_count,
    ps.page_count,
    i.fill_factor,
    i.has_filter,
    i.filter_definition,
    i.[allow_page_locks]
FROM
    sys.dm_db_index_physical_stats(DB_ID(),NULL, NULL, NULL , N'LIMITED') AS ps
    INNER JOIN sys.indexes AS i WITH (NOLOCK)
        ON ps.[object_id] = i.[object_id]
        AND ps.index_id = i.index_id
    INNER JOIN sys.objects AS o WITH (NOLOCK)
        ON i.[object_id] = o.[object_id]
WHERE
    ps.database_id = DB_ID()
    AND ps.page_count > 2500
ORDER BY
    ps.avg_fragmentation_in_percent DESC OPTION (RECOMPILE);
    
    
-- Index Read/Write stats (all tables in current DB) ordered by Reads (Overall Index Usage - Reads)
-- Show which indexes in the current database are most active for Reads
SELECT
    OBJECT_NAME(i.[object_id]) AS [ObjectName],
    i.[name] AS [IndexName],
    i.index_id,
    s.user_seeks,
    s.user_scans,
    s.user_lookups,
    s.user_seeks + s.user_scans + s.user_lookups AS [Total Reads],
    s.user_updates AS [Writes],
    i.[type_desc] AS [Index Type],
    i.fill_factor AS [Fill Factor],
    i.has_filter,
    i.filter_definition,
    s.last_user_scan, s.last_user_lookup, s.last_user_seek
FROM
    sys.indexes AS i WITH (NOLOCK)
    LEFT OUTER JOIN sys.dm_db_index_usage_stats AS s WITH (NOLOCK)
        ON i.[object_id] = s.[object_id]
        AND i.index_id = s.index_id
        AND s.database_id = DB_ID()
WHERE
    OBJECTPROPERTY(i.[object_id],'IsUserTable') = 1
ORDER BY
    s.user_seeks + s.user_scans + s.user_lookups DESC
OPTION (RECOMPILE);


-- Index Read/Write stats (all tables in current DB) ordered by Writes (Overall Index Usage - Writes)
-- Show which indexes in the current database are most active for Writes
SELECT
    OBJECT_NAME(i.[object_id]) AS [ObjectName],
    i.[name] AS [IndexName],
    i.index_id,
    s.user_updates AS [Writes],
    s.user_seeks + s.user_scans + s.user_lookups AS [Total Reads],
    i.[type_desc] AS [Index Type],
    i.fill_factor AS [Fill Factor],
    i.has_filter,
    i.filter_definition,
    s.last_system_update, s.last_user_update
FROM
    sys.indexes AS i WITH (NOLOCK)
    LEFT OUTER JOIN sys.dm_db_index_usage_stats AS s WITH (NOLOCK)
        ON i.[object_id] = s.[object_id]
        AND i.index_id = s.index_id
        AND s.database_id = DB_ID()
WHERE
    OBJECTPROPERTY(i.[object_id],'IsUserTable') = 1
ORDER BY
    s.user_updates DESC
OPTION (RECOMPILE);


-- Get lock waits for current database (Lock Waits)
-- This query is helpful for troubleshooting blocking and deadlocking issues
SELECT
    o.name AS [table_name],
    i.name AS [index_name],
    ios.index_id,
    ios.partition_number,
    SUM(ios.row_lock_wait_count) AS [total_row_lock_waits],
    SUM(ios.row_lock_wait_in_ms) AS [total_row_lock_wait_in_ms],
    SUM(ios.page_lock_wait_count) AS [total_page_lock_waits],
    SUM(ios.page_lock_wait_in_ms) AS [total_page_lock_wait_in_ms],
    SUM(ios.page_lock_wait_in_ms)+ SUM(row_lock_wait_in_ms) AS [total_lock_wait_in_ms]
FROM
    sys.dm_db_index_operational_stats(DB_ID(), NULL, NULL, NULL) AS ios
    INNER JOIN sys.objects AS o WITH (NOLOCK)
        ON ios.[object_id] = o.[object_id]
    INNER JOIN sys.indexes AS i WITH (NOLOCK)
        ON ios.[object_id] = i.[object_id]
        AND ios.index_id = i.index_id
WHERE
    o.[object_id] > 100
GROUP BY
    o.name, i.name, ios.index_id, ios.partition_number
    HAVING SUM(ios.page_lock_wait_in_ms)+ SUM(row_lock_wait_in_ms) > 0
ORDER BY
    total_lock_wait_in_ms DESC OPTION (RECOMPILE);
